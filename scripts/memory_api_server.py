# memory_api_server.py
# –°–µ—Ä–≤–µ—Ä FastAPI –¥–ª—è –æ—Ç–¥–∞—á–∏ "–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π" –ø–æ ID —É–∑–ª–∞

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç LTM —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
ltm = None
ltm_error = None

try:
    from ltm import ltm as ltm_instance

    ltm = ltm_instance
    print("‚úÖ LTM —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    ltm_error = f"ImportError: {e}"
    print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ltm –º–æ–¥—É–ª—å: {e}")
except TypeError as e:
    ltm_error = f"TypeError –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LTM: {e}"
    print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LTM: {e}")
    print("üí° –ü–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –≤–µ—Ä—Å–∏–µ–π google-generativeai –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
except Exception as e:
    ltm_error = f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}"
    print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ LTM: {e}")

print(f"üîç –°—Ç–∞—Ç—É—Å LTM: {'–î–æ—Å—Ç—É–ø–µ–Ω' if ltm else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")

app = FastAPI(title="Memory API", description="API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ –≥—Ä–∞—Ñ–∞")

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ HTML
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def root():
    return {"message": "Memory API Server –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"}


@app.get("/health")
async def health_check():
    return {
        "status": "ok",
        "ltm_available": ltm is not None,
        "ltm_error": ltm_error if ltm is None else None
    }


@app.get("/memory/{node_id}")
async def get_memory(node_id: str):
    if ltm is None:
        raise HTTPException(status_code=503, detail="LTM –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        result = ltm.stream_collection.get(
            ids=[node_id],
            include=["documents", "metadatas"]
        )

        if not result["ids"] or len(result["ids"]) == 0:
            raise HTTPException(status_code=404, detail=f"–£–∑–µ–ª {node_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        doc = result["documents"][0] if result["documents"] else "–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞"
        meta = result["metadatas"][0] if result["metadatas"] else {}

        role = meta.get("role", "unknown").capitalize()
        access_count = meta.get("access_count", 0)

        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML-–æ—Ç–≤–µ—Ç
        html_content = f"""
        <div style="font-family: Arial, sans-serif;">
            <h3 style="color: #333; margin-top: 0;">–£–∑–µ–ª: {node_id}</h3>
            <p><strong>–†–æ–ª—å:</strong> {role}</p>
            <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π:</strong> {access_count}</p>
            <hr style="margin: 15px 0;">
            <div style="background: #f5f5f5; padding: 10px; border-radius: 5px; max-height: 400px; overflow-y: auto;">
                <strong>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</strong><br>
                {doc}
            </div>
        </div>
        """

        return HTMLResponse(content=html_content)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É–∑–ª–∞ {node_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


if __name__ == "__main__":
    import uvicorn

    print("üöÄ –ó–∞–ø—É—Å–∫ Memory API Server...")
    uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")