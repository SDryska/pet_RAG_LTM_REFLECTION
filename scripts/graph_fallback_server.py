# graph_fallback_server.py
# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –≥—Ä–∞—Ñ–∞

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
import pickle
import networkx as nx
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
try:
    from config import GRAPH_FILE_PATH, AI_ROLE_NAME
except ImportError:
    print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω config.py, –∏—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    GRAPH_FILE_PATH = "graph.pkl"
    AI_ROLE_NAME = "assistant"

app = FastAPI(title="Graph Memory API", description="API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ –∏–∑ NetworkX –≥—Ä–∞—Ñ–∞")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≥—Ä–∞—Ñ–∞
graph = None
graph_error = None


def load_graph():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    global graph, graph_error
    try:
        if not os.path.exists(GRAPH_FILE_PATH):
            graph_error = f"–§–∞–π–ª –≥—Ä–∞—Ñ–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {GRAPH_FILE_PATH}"
            print(f"‚ùå {graph_error}")
            return False

        with open(GRAPH_FILE_PATH, 'rb') as f:
            graph = pickle.load(f)

        print(f"‚úÖ –ì—Ä–∞—Ñ –∑–∞–≥—Ä—É–∂–µ–Ω: {graph.number_of_nodes()} —É–∑–ª–æ–≤, {graph.number_of_edges()} —Ä—ë–±–µ—Ä")
        return True

    except Exception as e:
        graph_error = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∞: {str(e)}"
        print(f"‚ùå {graph_error}")
        return False


# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_graph()


@app.get("/")
async def root():
    return {
        "message": "Graph Memory API Server",
        "graph_loaded": graph is not None,
        "nodes": graph.number_of_nodes() if graph else 0,
        "edges": graph.number_of_edges() if graph else 0
    }


@app.get("/health")
async def health_check():
    return {
        "status": "ok",
        "graph_available": graph is not None,
        "graph_error": graph_error,
        "graph_file": GRAPH_FILE_PATH
    }


@app.get("/reload")
async def reload_graph():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∞"""
    success = load_graph()
    return {
        "success": success,
        "graph_available": graph is not None,
        "error": graph_error
    }


@app.get("/nodes")
async def list_nodes():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–∑–ª–æ–≤"""
    if graph is None:
        raise HTTPException(status_code=503, detail="–ì—Ä–∞—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    nodes_info = []
    for node_id, attrs in graph.nodes(data=True):
        nodes_info.append({
            "id": node_id,
            "role": attrs.get('role', 'unknown'),
            "attributes": attrs
        })

    return {"nodes": nodes_info, "count": len(nodes_info)}


@app.get("/memory/{node_id}")
async def get_memory(node_id: str):
    if graph is None:
        raise HTTPException(status_code=503, detail=f"–ì—Ä–∞—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {graph_error}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∑–µ–ª
        if node_id not in graph.nodes():
            raise HTTPException(status_code=404, detail=f"–£–∑–µ–ª {node_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä–∞—Ñ–µ")

        # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —É–∑–ª–∞
        attrs = graph.nodes[node_id]
        role = attrs.get('role', 'unknown')

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–µ–π
        neighbors = list(graph.neighbors(node_id))

        # –ü–æ–ª—É—á–∞–µ–º —Ä—ë–±—Ä–∞
        edges_info = []
        for neighbor in neighbors:
            edge_data = graph.get_edge_data(node_id, neighbor, {})
            edges_info.append({
                "to": neighbor,
                "type": edge_data.get('type', 'unknown'),
                "weight": edge_data.get('cumulative_weight', 1.0)
            })

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        content = attrs.get('content', attrs.get('text', attrs.get('document', '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')))

        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML-–æ—Ç–≤–µ—Ç
        html_content = f"""
        <div style="font-family: Arial, sans-serif;">
            <h3 style="color: #333; margin-top: 0;">–£–∑–µ–ª: {node_id}</h3>
            <p><strong>–†–æ–ª—å:</strong> <span style="color: {'#5CB85C' if role == 'user' else '#D9534F' if role == AI_ROLE_NAME else '#5BC0DE'};">{role.capitalize()}</span></p>
            <p><strong>–°–æ—Å–µ–¥–µ–π:</strong> {len(neighbors)}</p>

            <hr style="margin: 15px 0;">

            <h4>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</h4>
            <div style="background: #f5f5f5; padding: 10px; border-radius: 5px; max-height: 300px; overflow-y: auto; border-left: 4px solid #ddd;">
                {content}
            </div>

            <hr style="margin: 15px 0;">

            <h4>–í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã:</h4>
            <div style="background: #f9f9f9; padding: 10px; border-radius: 5px; max-height: 200px; overflow-y: auto; font-family: monospace; font-size: 12px;">
                {format_attributes(attrs)}
            </div>

            {f'''
            <hr style="margin: 15px 0;">
            <h4>–°–≤—è–∑–∏ ({len(edges_info)}):</h4>
            <div style="max-height: 150px; overflow-y: auto;">
                {''.join([f"<div style='margin: 5px 0; padding: 5px; background: #f0f0f0; border-radius: 3px;'><strong>{edge['to']}</strong> ({edge['type']}) - –≤–µ—Å: {edge['weight']:.2f}</div>" for edge in edges_info[:10]])}
                {f"<div style='color: #666; font-style: italic;'>... –∏ –µ—â—ë {len(edges_info) - 10}</div>" if len(edges_info) > 10 else ""}
            </div>
            ''' if edges_info else ''}
        </div>
        """

        return HTMLResponse(content=html_content)

    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É–∑–ª–∞ {node_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


def format_attributes(attrs):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not attrs:
        return "–ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤"

    formatted = []
    for key, value in attrs.items():
        if isinstance(value, str) and len(value) > 100:
            value = value[:100] + "..."
        formatted.append(f"<strong>{key}:</strong> {value}")

    return "<br>".join(formatted)


if __name__ == "__main__":
    import uvicorn

    print("üöÄ –ó–∞–ø—É—Å–∫ Graph Memory API Server...")
    uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")