# vizualize_graph.py
# v2.7.1 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ SyntaxError —Å f-string

import pickle
import networkx as nx
from pyvis.network import Network
import logging
import os
import subprocess
import threading
import time
import json
import sys
import webbrowser
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

try:
    from config import GRAPH_FILE_PATH, AI_ROLE_NAME
except ImportError:
    logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å config.py, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    GRAPH_FILE_PATH = "logs/mind_graph.gpickle"
    AI_ROLE_NAME = "assistant"


def check_api_server():
    import requests
    try:
        response = requests.get("http://127.0.0.1:8000/health", timeout=1)
        return response.status_code == 200
    except requests.exceptions.RequestException:
        return False


def run_memory_api():
    def target():
        logging.info("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω)...")
        if check_api_server():
            logging.info("üîÑ API —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        try:
            subprocess.Popen(
                [sys.executable, "-m", "uvicorn", "memory_api_server:app", "--host", "127.0.0.1", "--port", "8000"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
        except FileNotFoundError:
            logging.error("‚ùå 'uvicorn' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install uvicorn[standard]")
        except Exception as e:
            logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

    thread = threading.Thread(target=target, daemon=True)
    thread.start()

    for _ in range(10):
        if check_api_server():
            logging.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return True
        time.sleep(1)

    logging.warning("‚ö†Ô∏è  API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º... –î–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —É–∑–ª—ã –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    return False


def load_graph():
    try:
        if not os.path.exists(GRAPH_FILE_PATH):
            logging.error(f"‚ùå –§–∞–π–ª –≥—Ä–∞—Ñ–∞ '{GRAPH_FILE_PATH}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        with open(GRAPH_FILE_PATH, 'rb') as f:
            graph = pickle.load(f)
        logging.info(f"‚úÖ –ì—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ '{GRAPH_FILE_PATH}'")
        return graph
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∞: {e}")
        return None


# --- –ù–û–í–´–ô –ë–õ–û–ö: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JS ---
def prepare_data_for_js(graph):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, —É–¥–æ–±–Ω—ã–π –¥–ª—è JavaScript.
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—Å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.
    """
    nodes_data = []
    edges_data = []

    color_map = {'internal': '#5BC0DE', 'user': '#5CB85C', AI_ROLE_NAME: '#D9534F'}

    for node_id, attrs in graph.nodes(data=True):
        role = attrs.get('role', 'unknown')
        nodes_data.append({
            "id": node_id,
            "label": ' ',
            "color": color_map.get(role, '#808080'),
            "size": 10,
            "title": f"<b>ID:</b> {node_id}<br><b>–†–æ–ª—å:</b> {role}",
            "role": role  # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        })

    min_weight, max_weight = (1.0, 1.0)
    if graph.number_of_edges() > 0:
        weights = [attrs.get('cumulative_weight', 1.0) for u, v, attrs in graph.edges(data=True)]
        min_weight = min(weights) if weights else 1.0
        max_weight = max(weights) if weights else 1.0

    for u, v, attrs in graph.edges(data=True):
        edge_type = attrs.get('type', 'unknown')
        weight = attrs.get('cumulative_weight', 1.0)
        width = max(0.5, min(weight * 0.2, 3.0))

        edges_data.append({
            "from": u,
            "to": v,
            "color": 'rgba(0,0,0,0.3)' if edge_type == 'structural' else 'rgba(100,100,100,0.3)',
            "width": width,
            "dashes": edge_type == 'associative',
            "title": f"<b>–¢–∏–ø:</b> {edge_type}<br><b>–í–µ—Å:</b> {weight:.2f}",
            "type": edge_type,  # –ß–∏—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            "weight": weight  # –ß–∏—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        })

    # –û–∫—Ä—É–≥–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
    min_weight_rounded = math.floor(min_weight * 10) / 10
    max_weight_rounded = math.ceil(max_weight * 10) / 10

    return nodes_data, edges_data, min_weight_rounded, max_weight_rounded


# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---


def create_pyvis_network(nodes_data, edges_data):
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ç—å pyvis –∏–∑ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    net = Network(
        height='95vh',
        width='100%',
        notebook=False,
        cdn_resources='in_line',
        bgcolor='#ffffff',
        font_color='#000000'
    )

    if not nodes_data:
        # –ï—Å–ª–∏ –Ω–µ—Ç —É–∑–ª–æ–≤, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return net

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —É–∑–ª–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    node_ids = [d['id'] for d in nodes_data]

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤,
    # –ò–°–ö–õ–Æ–ß–ê–Ø 'id' –∏ –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç 'role'
    node_properties = {
        k: [d[k] for d in nodes_data]
        for k in nodes_data[0]
        if k not in ['id', 'role']  # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
    }

    net.add_nodes(node_ids, **node_properties)

    for edge in edges_data:
        net.add_edge(edge['from'], edge['to'],
                     color=edge['color'], width=edge['width'],
                     dashes=edge['dashes'], title=edge['title'])

    return net


def configure_physics(net):
    physics_config = {
        "edges": {"smooth": {"type": "continuous", "roundness": 0.2}},
        "physics": {
            "enabled": True,
            "solver": "barnesHut",
            "barnesHut": {
                "gravitationalConstant": -8000, "centralGravity": 0.1, "springLength": 200,
                "springConstant": 0.04, "damping": 0.95, "avoidOverlap": 0.2
            },
            "stabilization": {"enabled": True, "iterations": 1000, "updateInterval": 25, "fit": True},
            "timestep": 0.5, "adaptiveTimestep": True, "maxVelocity": 30, "minVelocity": 0.1
        },
        "interaction": {"hover": True, "selectConnectedEdges": False, "dragNodes": True, "dragView": True,
                        "zoomView": True}
    }
    net.set_options(json.dumps(physics_config))


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ JS —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ ---
def add_custom_js(html_content, all_nodes_json, all_edges_json, min_weight, max_weight):
    # –î–æ–±–∞–≤–ª–µ–Ω —á–µ–∫–±–æ–∫—Å –∏ –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
    custom_js = f"""<style>
#memory-panel{{position:fixed;top:10px;right:10px;width:35%;height:90vh;overflow:auto;border:2px solid #ddd;border-radius:8px;padding:15px;background:#fff;font-family:'Segoe UI',Arial,sans-serif;font-size:14px;z-index:1000;box-shadow:0 4px 6px rgba(0,0,0,.1)}}
#memory-panel h3{{margin-top:0;color:#333;border-bottom:2px solid #eee;padding-bottom:10px}}
.loading{{text-align:center;color:#666;font-style:italic}}
.error{{color:#d9534f;background:#f2dede;padding:10px;border-radius:4px;border:1px solid #ebccd1}}
#controls-container{{position:fixed;bottom:10px;left:10px;z-index:1000;display:flex;flex-direction:column;gap:10px;}}
.control-panel{{background:rgba(255,255,255,0.9);padding:10px;border-radius:8px;border:1px solid #ddd;font-family:'Segoe UI',Arial,sans-serif;font-size:12px;box-shadow:0 2px 4px rgba(0,0,0,.1)}}
.control-panel h4{{margin:0 0 8px 0;font-size:13px;border-bottom:1px solid #eee;padding-bottom:5px}}
.control-panel button{{margin:2px;padding:5px 10px;border:1px solid #ccc;border-radius:4px;background:#f8f9fa;cursor:pointer;font-size:11px}}
.control-panel button:hover{{background:#e9ecef}}
.control-panel button.active{{background:#007bff;color:white}}
.filter-group label{{display:inline-block;margin-right:10px;user-select:none;}}
#weight-slider-container label{{display:block;margin-bottom:5px;}}
</style>
<div id="memory-panel"><div class="loading">üëÜ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —É–∑–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</div></div>
<div id="controls-container">
    <div id="filter-controls" class="control-panel">
        <h4>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è</h4>
        <div class="filter-group">
            <strong>–†–æ–ª–∏ —É–∑–ª–æ–≤:</strong>
            <label><input type="checkbox" class="filter-cb" id="filter-role-user" checked> User</label>
            <label><input type="checkbox" class="filter-cb" id="filter-role-{AI_ROLE_NAME}" checked> Assistant</label>
            <label><input type="checkbox" class="filter-cb" id="filter-role-internal" checked> Internal</label>
        </div>
        <div class="filter-group" style="margin-top:8px;">
            <strong>–¢–∏–ø—ã —Ä—ë–±–µ—Ä:</strong>
            <label><input type="checkbox" class="filter-cb" id="filter-type-structural" checked> Structural</label>
            <label><input type="checkbox" class="filter-cb" id="filter-type-associative" checked> Associative</label>
        </div>
        <div id="weight-slider-container" style="margin-top:8px;">
            <label for="filter-weight">–ú–∏–Ω. –≤–µ—Å —Ä–µ–±—Ä–∞: <span id="weight-value">{min_weight:.2f}</span></label>
            <input type="range" id="filter-weight" min="{min_weight}" max="{max_weight}" value="{min_weight}" step="0.1" style="width:100%;">
        </div>
        <!-- –ù–û–í–´–ô –ß–ï–ö–ë–û–ö–° -->
        <div class="filter-group" style="margin-top:8px; border-top: 1px solid #eee; padding-top: 8px;">
             <label><input type="checkbox" class="filter-cb" id="filter-hide-isolated"> –°–∫—Ä—ã–≤–∞—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∑–ª—ã</label>
        </div>
        <!-- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ß–ï–ö–ë–û–ö–°–ê -->
        <div style="margin-top:10px; text-align:right;">
            <button id="apply-filters-btn">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
            <button id="reset-filters-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
        </div>
    </div>
    <div id="physics-controls" class="control-panel">
        <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏–∫–æ–π</h4>
        <button id="physics-toggle" class="active">üîÑ –§–∏–∑–∏–∫–∞ –≤–∫–ª</button>
        <button id="stabilize-btn">‚ö° –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å</button>
        <button id="fit-btn">üéØ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ</button>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {{
    const allNodes = {all_nodes_json};
    const allEdges = {all_edges_json};
    let currentNodeId = null;
    let physicsEnabled = true;

    // --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ---
    function applyFilters() {{
        console.log("Applying filters...");
        const visibleRoles = {{
            'user': document.getElementById('filter-role-user').checked,
            '{AI_ROLE_NAME}': document.getElementById('filter-role-{AI_ROLE_NAME}').checked,
            'internal': document.getElementById('filter-role-internal').checked
        }};
        const visibleTypes = {{
            'structural': document.getElementById('filter-type-structural').checked,
            'associative': document.getElementById('filter-type-associative').checked
        }};
        const minWeight = parseFloat(document.getElementById('filter-weight').value);
        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ß–∏—Ç–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
        const hideIsolated = document.getElementById('filter-hide-isolated').checked;

        // –®–∞–≥ 1: –§–∏–ª—å—Ç—Ä—É–µ–º —É–∑–ª—ã –ø–æ —Ä–æ–ª—è–º
        let preliminaryNodes = allNodes.filter(node => visibleRoles[node.role]);
        const preliminaryNodeIds = new Set(preliminaryNodes.map(n => n.id));

        // –®–∞–≥ 2: –§–∏–ª—å—Ç—Ä—É–µ–º —Ä—ë–±—Ä–∞ –ø–æ —Ç–∏–ø—É, –≤–µ—Å—É –∏ –Ω–∞–ª–∏—á–∏—é —É–∑–ª–æ–≤ –Ω–∞ –æ–±–æ–∏—Ö –∫–æ–Ω—Ü–∞—Ö
        const filteredEdges = allEdges.filter(edge => 
            visibleTypes[edge.type] &&
            edge.weight >= minWeight &&
            preliminaryNodeIds.has(edge.from) &&
            preliminaryNodeIds.has(edge.to)
        );

        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –§–∏–ª—å—Ç—Ä—É–µ–º —É–∑–ª—ã –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        let finalNodes;
        if (hideIsolated) {{
            // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ —É–∑–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä—ë–±—Ä–∞—Ö
            const connectedNodeIds = new Set();
            filteredEdges.forEach(edge => {{
                connectedNodeIds.add(edge.from);
                connectedNodeIds.add(edge.to);
            }});
            finalNodes = preliminaryNodes.filter(node => connectedNodeIds.has(node.id));
        }} else {{
            // –ò–Ω–∞—á–µ, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∑–ª—ã, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–æ–ª—è–º
            finalNodes = preliminaryNodes;
        }}

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Ç–∏
        nodes.clear();
        edges.clear();
        nodes.add(finalNodes);
        edges.add(filteredEdges);

        console.log(`–ì—Ä–∞—Ñ –æ–±–Ω–æ–≤–ª–µ–Ω: ${{finalNodes.length}} —É–∑–ª–æ–≤, ${{filteredEdges.length}} —Ä—ë–±–µ—Ä`);
    }}

    document.getElementById('apply-filters-btn').addEventListener('click', applyFilters);

    document.getElementById('reset-filters-btn').addEventListener('click', function() {{
        document.querySelectorAll('.filter-cb').forEach(cb => cb.checked = cb.id !== 'filter-hide-isolated');
        document.getElementById('filter-hide-isolated').checked = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –Ω–æ–≤—ã–π —á–µ–∫–±–æ–∫—Å

        const weightSlider = document.getElementById('filter-weight');
        weightSlider.value = weightSlider.min;
        document.getElementById('weight-value').textContent = parseFloat(weightSlider.min).toFixed(2);

        nodes.clear();
        edges.clear();
        nodes.add(allNodes);
        edges.add(allEdges);
        console.log("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã. –ü–æ–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π –≥—Ä–∞—Ñ.");
    }});

    document.getElementById('filter-weight').addEventListener('input', function() {{
        document.getElementById('weight-value').textContent = parseFloat(this.value).toFixed(2);
    }});

    // --- –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–∑–∏–∫–æ–π –∏ –∫–ª–∏–∫–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    setTimeout(() => {{
        if (typeof network === 'undefined') {{
            console.error("Pyvis 'network' object not found!");
            return;
        }}

        network.on("stabilizationIterationsDone", function() {{
            setTimeout(() => {{
                network.setOptions({{ physics: {{ enabled: false }} }});
                physicsEnabled = false;
                const toggleBtn = document.getElementById("physics-toggle");
                toggleBtn.textContent = "üîÑ –§–∏–∑–∏–∫–∞ –≤—ã–∫–ª";
                toggleBtn.classList.remove("active");
                console.log("üîí –§–∏–∑–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏");
            }}, 500);
        }});

        document.getElementById("physics-toggle").addEventListener("click", function() {{
            physicsEnabled = !physicsEnabled;
            network.setOptions({{ physics: {{ enabled: physicsEnabled }} }});
            this.textContent = physicsEnabled ? "üîÑ –§–∏–∑–∏–∫–∞ –≤–∫–ª" : "üîÑ –§–∏–∑–∏–∫–∞ –≤—ã–∫–ª";
            this.classList.toggle("active", physicsEnabled);
            console.log(`üîß –§–∏–∑–∏–∫–∞ ${{physicsEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}} –≤—Ä—É—á–Ω—É—é`);
        }});

        document.getElementById("stabilize-btn").addEventListener("click", function() {{
            if (!physicsEnabled) {{
                network.setOptions({{ physics: {{ enabled: true }} }});
                physicsEnabled = true;
                const toggleBtn = document.getElementById("physics-toggle");
                toggleBtn.textContent = "üîÑ –§–∏–∑–∏–∫–∞ –≤–∫–ª";
                toggleBtn.classList.add("active");
            }}
            network.stabilize();
            console.log("‚ö° –ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞");
        }});

        document.getElementById("fit-btn").addEventListener("click", function() {{
            network.fit();
            console.log("üéØ –ì—Ä–∞—Ñ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —É–∑–ª–æ–≤");
        }});

        network.on("click", function(e) {{
            const panel = document.getElementById("memory-panel");
            if (e.nodes.length > 0) {{
                let nodeId = e.nodes[0];
                currentNodeId = nodeId;
                panel.innerHTML = '<div class="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É–∑–ª–∞: ' + nodeId + '</div>';

                fetch(`http://127.0.0.1:8000/memory/${{nodeId}}`)
                    .then(response => {{
                        if (!response.ok) {{ throw new Error(`HTTP ${{response.status}}: ${{response.statusText}}`); }}
                        return response.text();
                    }})
                    .then(data => {{ if (currentNodeId === nodeId) {{ panel.innerHTML = data; }} }})
                    .catch(error => {{
                        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
                        if (currentNodeId === nodeId) {{
                            panel.innerHTML = `<div class="error"><strong>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</strong><br>–£–∑–µ–ª: <code>${{nodeId}}</code><br>–û—à–∏–±–∫–∞: ${{error.message}}<br><br><small>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000</small></div>`;
                        }}
                    }});
            }} else {{
                panel.innerHTML = '<div class="loading">üëÜ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —É–∑–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</div>';
                currentNodeId = null;
            }}
        }});

        network.on("hoverNode", function() {{ document.body.style.cursor = "pointer"; }});
        network.on("blurNode", function() {{ document.body.style.cursor = "default"; }});

        console.log("üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");

    }}, 100);
}});
</script>"""

    if "</body>" in html_content:
        return html_content.replace("</body>", custom_js + "</body>")
    return html_content + custom_js


def visualize_interactive():
    logging.info("--- üé® –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≥—Ä–∞—Ñ–∞ ---")

    graph = load_graph()
    if graph is None:
        return False

    if graph.number_of_nodes() == 0:
        logging.warning("‚ö†Ô∏è  –ì—Ä–∞—Ñ –ø—É—Å—Ç. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return False

    logging.info(f"üìä –ì—Ä–∞—Ñ —Å–æ–¥–µ—Ä–∂–∏—Ç {graph.number_of_nodes()} —É–∑–ª–æ–≤ –∏ {graph.number_of_edges()} —Ä—ë–±–µ—Ä")

    nodes_data, edges_data, min_w, max_w = prepare_data_for_js(graph)

    net = create_pyvis_network(nodes_data, edges_data)

    configure_physics(net)

    html_path = "interactive_graph_visualization.html"
    html_content = net.generate_html()

    all_nodes_json = json.dumps(nodes_data)
    all_edges_json = json.dumps(edges_data)
    html_content = add_custom_js(html_content, all_nodes_json, all_edges_json, min_w, max_w)

    try:
        with open(html_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        full_path = os.path.abspath(html_path)
        logging.info(f"‚úÖ HTML —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {full_path}")

        try:
            webbrowser.open(f"file://{full_path}")
            logging.info("üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")
            logging.info(f"–û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: file://{full_path}")

        return True

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML: {e}")
        return False


def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞")
    api_started = run_memory_api()
    viz_created = visualize_interactive()

    if viz_created:
        logging.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
        logging.info("üî¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∞.")
        if api_started:
            logging.info("üí° –ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ —É–∑–ª—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        else:
            logging.warning("‚ö†Ô∏è  API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –¥–∞–Ω–Ω—ã–µ —É–∑–ª–æ–≤ –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            logging.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")


if __name__ == "__main__":
    main()